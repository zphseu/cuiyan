//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DataSetXml {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DriverXml")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    internal partial class DriverXml : global::System.Data.DataSet {
        
        private driverDataTable tabledriver;
        
        private deviceDataTable tabledevice;
        
        private datablockDataTable tabledatablock;
        
        private global::System.Data.DataRelation relationdriver_device;
        
        private global::System.Data.DataRelation relationdevice_datablock;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.ExcludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DriverXml() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DriverXml(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["driver"] != null)) {
                    base.Tables.Add(new driverDataTable(ds.Tables["driver"]));
                }
                if ((ds.Tables["device"] != null)) {
                    base.Tables.Add(new deviceDataTable(ds.Tables["device"]));
                }
                if ((ds.Tables["datablock"] != null)) {
                    base.Tables.Add(new datablockDataTable(ds.Tables["datablock"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public driverDataTable driver {
            get {
                return this.tabledriver;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public deviceDataTable device {
            get {
                return this.tabledevice;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public datablockDataTable datablock {
            get {
                return this.tabledatablock;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DriverXml cln = ((DriverXml)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["driver"] != null)) {
                    base.Tables.Add(new driverDataTable(ds.Tables["driver"]));
                }
                if ((ds.Tables["device"] != null)) {
                    base.Tables.Add(new deviceDataTable(ds.Tables["device"]));
                }
                if ((ds.Tables["datablock"] != null)) {
                    base.Tables.Add(new datablockDataTable(ds.Tables["datablock"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledriver = ((driverDataTable)(base.Tables["driver"]));
            if ((initTable == true)) {
                if ((this.tabledriver != null)) {
                    this.tabledriver.InitVars();
                }
            }
            this.tabledevice = ((deviceDataTable)(base.Tables["device"]));
            if ((initTable == true)) {
                if ((this.tabledevice != null)) {
                    this.tabledevice.InitVars();
                }
            }
            this.tabledatablock = ((datablockDataTable)(base.Tables["datablock"]));
            if ((initTable == true)) {
                if ((this.tabledatablock != null)) {
                    this.tabledatablock.InitVars();
                }
            }
            this.relationdriver_device = this.Relations["driver_device"];
            this.relationdevice_datablock = this.Relations["device_datablock"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DriverXml";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.ExcludeSchema;
            this.tabledriver = new driverDataTable();
            base.Tables.Add(this.tabledriver);
            this.tabledevice = new deviceDataTable();
            base.Tables.Add(this.tabledevice);
            this.tabledatablock = new datablockDataTable();
            base.Tables.Add(this.tabledatablock);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("driver_device", new global::System.Data.DataColumn[] {
                        this.tabledriver.driver_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledevice.driver_IdColumn});
            this.tabledevice.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("device_datablock", new global::System.Data.DataColumn[] {
                        this.tabledevice.device_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledatablock.device_IdColumn});
            this.tabledatablock.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationdriver_device = new global::System.Data.DataRelation("driver_device", new global::System.Data.DataColumn[] {
                        this.tabledriver.driver_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledevice.driver_IdColumn}, false);
            this.relationdriver_device.Nested = true;
            this.Relations.Add(this.relationdriver_device);
            this.relationdevice_datablock = new global::System.Data.DataRelation("device_datablock", new global::System.Data.DataColumn[] {
                        this.tabledevice.device_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledatablock.device_IdColumn}, false);
            this.relationdevice_datablock.Nested = true;
            this.Relations.Add(this.relationdevice_datablock);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedriver() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedevice() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedatablock() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DriverXml ds = new DriverXml();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void driverRowChangeEventHandler(object sender, driverRowChangeEvent e);
        
        public delegate void deviceRowChangeEventHandler(object sender, deviceRowChangeEvent e);
        
        public delegate void datablockRowChangeEventHandler(object sender, datablockRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class driverDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columndesc;
            
            private global::System.Data.DataColumn columndriver_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public driverDataTable() {
                this.TableName = "driver";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal driverDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected driverDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descColumn {
                get {
                    return this.columndesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn driver_IdColumn {
                get {
                    return this.columndriver_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public driverRow this[int index] {
                get {
                    return ((driverRow)(this.Rows[index]));
                }
            }
            
            public event driverRowChangeEventHandler driverRowChanging;
            
            public event driverRowChangeEventHandler driverRowChanged;
            
            public event driverRowChangeEventHandler driverRowDeleting;
            
            public event driverRowChangeEventHandler driverRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddriverRow(driverRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public driverRow AdddriverRow(string name, string type, string desc) {
                driverRow rowdriverRow = ((driverRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        type,
                        desc,
                        null};
                rowdriverRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdriverRow);
                return rowdriverRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                driverDataTable cln = ((driverDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new driverDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columntype = base.Columns["type"];
                this.columndesc = base.Columns["desc"];
                this.columndriver_Id = base.Columns["driver_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntype);
                this.columndesc = new global::System.Data.DataColumn("desc", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndesc);
                this.columndriver_Id = new global::System.Data.DataColumn("driver_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndriver_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndriver_Id}, true));
                this.columnname.Namespace = "";
                this.columntype.Namespace = "";
                this.columndesc.Namespace = "";
                this.columndriver_Id.AutoIncrement = true;
                this.columndriver_Id.AllowDBNull = false;
                this.columndriver_Id.Unique = true;
                this.columndriver_Id.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public driverRow NewdriverRow() {
                return ((driverRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new driverRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(driverRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.driverRowChanged != null)) {
                    this.driverRowChanged(this, new driverRowChangeEvent(((driverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.driverRowChanging != null)) {
                    this.driverRowChanging(this, new driverRowChangeEvent(((driverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.driverRowDeleted != null)) {
                    this.driverRowDeleted(this, new driverRowChangeEvent(((driverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.driverRowDeleting != null)) {
                    this.driverRowDeleting(this, new driverRowChangeEvent(((driverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedriverRow(driverRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DriverXml ds = new DriverXml();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "driverDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class deviceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnconntype;
            
            private global::System.Data.DataColumn columnconnparam;
            
            private global::System.Data.DataColumn columncyclerate;
            
            private global::System.Data.DataColumn columnrecvtimeout;
            
            private global::System.Data.DataColumn columntask;
            
            private global::System.Data.DataColumn columndesc;
            
            private global::System.Data.DataColumn columnparam1;
            
            private global::System.Data.DataColumn columnparam2;
            
            private global::System.Data.DataColumn columnparam3;
            
            private global::System.Data.DataColumn columndevice_Id;
            
            private global::System.Data.DataColumn columndriver_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deviceDataTable() {
                this.TableName = "device";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal deviceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected deviceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn conntypeColumn {
                get {
                    return this.columnconntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connparamColumn {
                get {
                    return this.columnconnparam;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cyclerateColumn {
                get {
                    return this.columncyclerate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn recvtimeoutColumn {
                get {
                    return this.columnrecvtimeout;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn taskColumn {
                get {
                    return this.columntask;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descColumn {
                get {
                    return this.columndesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn param1Column {
                get {
                    return this.columnparam1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn param2Column {
                get {
                    return this.columnparam2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn param3Column {
                get {
                    return this.columnparam3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn device_IdColumn {
                get {
                    return this.columndevice_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn driver_IdColumn {
                get {
                    return this.columndriver_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deviceRow this[int index] {
                get {
                    return ((deviceRow)(this.Rows[index]));
                }
            }
            
            public event deviceRowChangeEventHandler deviceRowChanging;
            
            public event deviceRowChangeEventHandler deviceRowChanged;
            
            public event deviceRowChangeEventHandler deviceRowDeleting;
            
            public event deviceRowChangeEventHandler deviceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddeviceRow(deviceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deviceRow AdddeviceRow(string name, string conntype, string connparam, string cyclerate, string recvtimeout, string task, string desc, string param1, string param2, string param3, driverRow parentdriverRowBydriver_device) {
                deviceRow rowdeviceRow = ((deviceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        conntype,
                        connparam,
                        cyclerate,
                        recvtimeout,
                        task,
                        desc,
                        param1,
                        param2,
                        param3,
                        null,
                        null};
                if ((parentdriverRowBydriver_device != null)) {
                    columnValuesArray[11] = parentdriverRowBydriver_device[3];
                }
                rowdeviceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdeviceRow);
                return rowdeviceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                deviceDataTable cln = ((deviceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new deviceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columnconntype = base.Columns["conntype"];
                this.columnconnparam = base.Columns["connparam"];
                this.columncyclerate = base.Columns["cyclerate"];
                this.columnrecvtimeout = base.Columns["recvtimeout"];
                this.columntask = base.Columns["task"];
                this.columndesc = base.Columns["desc"];
                this.columnparam1 = base.Columns["param1"];
                this.columnparam2 = base.Columns["param2"];
                this.columnparam3 = base.Columns["param3"];
                this.columndevice_Id = base.Columns["device_Id"];
                this.columndriver_Id = base.Columns["driver_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columnconntype = new global::System.Data.DataColumn("conntype", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnconntype);
                this.columnconnparam = new global::System.Data.DataColumn("connparam", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnconnparam);
                this.columncyclerate = new global::System.Data.DataColumn("cyclerate", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncyclerate);
                this.columnrecvtimeout = new global::System.Data.DataColumn("recvtimeout", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnrecvtimeout);
                this.columntask = new global::System.Data.DataColumn("task", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntask);
                this.columndesc = new global::System.Data.DataColumn("desc", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndesc);
                this.columnparam1 = new global::System.Data.DataColumn("param1", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnparam1);
                this.columnparam2 = new global::System.Data.DataColumn("param2", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnparam2);
                this.columnparam3 = new global::System.Data.DataColumn("param3", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnparam3);
                this.columndevice_Id = new global::System.Data.DataColumn("device_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndevice_Id);
                this.columndriver_Id = new global::System.Data.DataColumn("driver_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndriver_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndevice_Id}, true));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("deviceKey", new global::System.Data.DataColumn[] {
                                this.columnname}, false));
                this.columnname.Unique = true;
                this.columnname.Namespace = "";
                this.columnconntype.Namespace = "";
                this.columnconnparam.Namespace = "";
                this.columncyclerate.Namespace = "";
                this.columnrecvtimeout.Namespace = "";
                this.columntask.Namespace = "";
                this.columndesc.Namespace = "";
                this.columnparam1.Namespace = "";
                this.columnparam2.Namespace = "";
                this.columnparam3.Namespace = "";
                this.columndevice_Id.AutoIncrement = true;
                this.columndevice_Id.AllowDBNull = false;
                this.columndevice_Id.Unique = true;
                this.columndevice_Id.Namespace = "";
                this.columndriver_Id.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deviceRow NewdeviceRow() {
                return ((deviceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new deviceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(deviceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.deviceRowChanged != null)) {
                    this.deviceRowChanged(this, new deviceRowChangeEvent(((deviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.deviceRowChanging != null)) {
                    this.deviceRowChanging(this, new deviceRowChangeEvent(((deviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.deviceRowDeleted != null)) {
                    this.deviceRowDeleted(this, new deviceRowChangeEvent(((deviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.deviceRowDeleting != null)) {
                    this.deviceRowDeleting(this, new deviceRowChangeEvent(((deviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedeviceRow(deviceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DriverXml ds = new DriverXml();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "deviceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class datablockDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columnaddress;
            
            private global::System.Data.DataColumn columnelemcount;
            
            private global::System.Data.DataColumn columnelembytes;
            
            private global::System.Data.DataColumn columncyclerate;
            
            private global::System.Data.DataColumn columnphase;
            
            private global::System.Data.DataColumn columntask;
            
            private global::System.Data.DataColumn columndesc;
            
            private global::System.Data.DataColumn columnparam1;
            
            private global::System.Data.DataColumn columnparam2;
            
            private global::System.Data.DataColumn columnparam3;
            
            private global::System.Data.DataColumn columndevice_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public datablockDataTable() {
                this.TableName = "datablock";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal datablockDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected datablockDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn addressColumn {
                get {
                    return this.columnaddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn elemcountColumn {
                get {
                    return this.columnelemcount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn elembytesColumn {
                get {
                    return this.columnelembytes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cyclerateColumn {
                get {
                    return this.columncyclerate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn phaseColumn {
                get {
                    return this.columnphase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn taskColumn {
                get {
                    return this.columntask;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descColumn {
                get {
                    return this.columndesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn param1Column {
                get {
                    return this.columnparam1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn param2Column {
                get {
                    return this.columnparam2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn param3Column {
                get {
                    return this.columnparam3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn device_IdColumn {
                get {
                    return this.columndevice_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public datablockRow this[int index] {
                get {
                    return ((datablockRow)(this.Rows[index]));
                }
            }
            
            public event datablockRowChangeEventHandler datablockRowChanging;
            
            public event datablockRowChangeEventHandler datablockRowChanged;
            
            public event datablockRowChangeEventHandler datablockRowDeleting;
            
            public event datablockRowChangeEventHandler datablockRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddatablockRow(datablockRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public datablockRow AdddatablockRow(string name, string type, string address, string elemcount, string elembytes, string cyclerate, string phase, string task, string desc, string param1, string param2, string param3, deviceRow parentdeviceRowBydevice_datablock) {
                datablockRow rowdatablockRow = ((datablockRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        type,
                        address,
                        elemcount,
                        elembytes,
                        cyclerate,
                        phase,
                        task,
                        desc,
                        param1,
                        param2,
                        param3,
                        null};
                if ((parentdeviceRowBydevice_datablock != null)) {
                    columnValuesArray[12] = parentdeviceRowBydevice_datablock[10];
                }
                rowdatablockRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdatablockRow);
                return rowdatablockRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                datablockDataTable cln = ((datablockDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new datablockDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columntype = base.Columns["type"];
                this.columnaddress = base.Columns["address"];
                this.columnelemcount = base.Columns["elemcount"];
                this.columnelembytes = base.Columns["elembytes"];
                this.columncyclerate = base.Columns["cyclerate"];
                this.columnphase = base.Columns["phase"];
                this.columntask = base.Columns["task"];
                this.columndesc = base.Columns["desc"];
                this.columnparam1 = base.Columns["param1"];
                this.columnparam2 = base.Columns["param2"];
                this.columnparam3 = base.Columns["param3"];
                this.columndevice_Id = base.Columns["device_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntype);
                this.columnaddress = new global::System.Data.DataColumn("address", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnaddress);
                this.columnelemcount = new global::System.Data.DataColumn("elemcount", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnelemcount);
                this.columnelembytes = new global::System.Data.DataColumn("elembytes", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnelembytes);
                this.columncyclerate = new global::System.Data.DataColumn("cyclerate", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncyclerate);
                this.columnphase = new global::System.Data.DataColumn("phase", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnphase);
                this.columntask = new global::System.Data.DataColumn("task", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntask);
                this.columndesc = new global::System.Data.DataColumn("desc", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndesc);
                this.columnparam1 = new global::System.Data.DataColumn("param1", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnparam1);
                this.columnparam2 = new global::System.Data.DataColumn("param2", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnparam2);
                this.columnparam3 = new global::System.Data.DataColumn("param3", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnparam3);
                this.columndevice_Id = new global::System.Data.DataColumn("device_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndevice_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("datablockKey", new global::System.Data.DataColumn[] {
                                this.columnname}, false));
                this.columnname.Unique = true;
                this.columnname.Namespace = "";
                this.columntype.Namespace = "";
                this.columnaddress.Namespace = "";
                this.columnelemcount.Namespace = "";
                this.columnelembytes.Namespace = "";
                this.columncyclerate.Namespace = "";
                this.columnphase.Namespace = "";
                this.columntask.Namespace = "";
                this.columndesc.Namespace = "";
                this.columnparam1.Namespace = "";
                this.columnparam2.Namespace = "";
                this.columnparam3.Namespace = "";
                this.columndevice_Id.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public datablockRow NewdatablockRow() {
                return ((datablockRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new datablockRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(datablockRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.datablockRowChanged != null)) {
                    this.datablockRowChanged(this, new datablockRowChangeEvent(((datablockRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.datablockRowChanging != null)) {
                    this.datablockRowChanging(this, new datablockRowChangeEvent(((datablockRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.datablockRowDeleted != null)) {
                    this.datablockRowDeleted(this, new datablockRowChangeEvent(((datablockRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.datablockRowDeleting != null)) {
                    this.datablockRowDeleting(this, new datablockRowChangeEvent(((datablockRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedatablockRow(datablockRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DriverXml ds = new DriverXml();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "datablockDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class driverRow : global::System.Data.DataRow {
            
            private driverDataTable tabledriver;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal driverRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledriver = ((driverDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tabledriver.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'driver\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledriver.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    try {
                        return ((string)(this[this.tabledriver.typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'type\' in table \'driver\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledriver.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string desc {
                get {
                    try {
                        return ((string)(this[this.tabledriver.descColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'desc\' in table \'driver\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledriver.descColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int driver_Id {
                get {
                    return ((int)(this[this.tabledriver.driver_IdColumn]));
                }
                set {
                    this[this.tabledriver.driver_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tabledriver.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tabledriver.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tabledriver.typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tabledriver.typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescNull() {
                return this.IsNull(this.tabledriver.descColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescNull() {
                this[this.tabledriver.descColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deviceRow[] GetdeviceRows() {
                if ((this.Table.ChildRelations["driver_device"] == null)) {
                    return new deviceRow[0];
                }
                else {
                    return ((deviceRow[])(base.GetChildRows(this.Table.ChildRelations["driver_device"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class deviceRow : global::System.Data.DataRow {
            
            private deviceDataTable tabledevice;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal deviceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledevice = ((deviceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tabledevice.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'device\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledevice.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string conntype {
                get {
                    try {
                        return ((string)(this[this.tabledevice.conntypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'conntype\' in table \'device\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledevice.conntypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connparam {
                get {
                    try {
                        return ((string)(this[this.tabledevice.connparamColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'connparam\' in table \'device\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledevice.connparamColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cyclerate {
                get {
                    try {
                        return ((string)(this[this.tabledevice.cyclerateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cyclerate\' in table \'device\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledevice.cyclerateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string recvtimeout {
                get {
                    try {
                        return ((string)(this[this.tabledevice.recvtimeoutColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'recvtimeout\' in table \'device\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledevice.recvtimeoutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string task {
                get {
                    try {
                        return ((string)(this[this.tabledevice.taskColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'task\' in table \'device\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledevice.taskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string desc {
                get {
                    try {
                        return ((string)(this[this.tabledevice.descColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'desc\' in table \'device\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledevice.descColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string param1 {
                get {
                    try {
                        return ((string)(this[this.tabledevice.param1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'param1\' in table \'device\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledevice.param1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string param2 {
                get {
                    try {
                        return ((string)(this[this.tabledevice.param2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'param2\' in table \'device\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledevice.param2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string param3 {
                get {
                    try {
                        return ((string)(this[this.tabledevice.param3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'param3\' in table \'device\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledevice.param3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int device_Id {
                get {
                    return ((int)(this[this.tabledevice.device_IdColumn]));
                }
                set {
                    this[this.tabledevice.device_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int driver_Id {
                get {
                    try {
                        return ((int)(this[this.tabledevice.driver_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'driver_Id\' in table \'device\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledevice.driver_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public driverRow driverRow {
                get {
                    return ((driverRow)(this.GetParentRow(this.Table.ParentRelations["driver_device"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["driver_device"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tabledevice.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tabledevice.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconntypeNull() {
                return this.IsNull(this.tabledevice.conntypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconntypeNull() {
                this[this.tabledevice.conntypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconnparamNull() {
                return this.IsNull(this.tabledevice.connparamColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconnparamNull() {
                this[this.tabledevice.connparamColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscyclerateNull() {
                return this.IsNull(this.tabledevice.cyclerateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcyclerateNull() {
                this[this.tabledevice.cyclerateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrecvtimeoutNull() {
                return this.IsNull(this.tabledevice.recvtimeoutColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrecvtimeoutNull() {
                this[this.tabledevice.recvtimeoutColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstaskNull() {
                return this.IsNull(this.tabledevice.taskColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettaskNull() {
                this[this.tabledevice.taskColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescNull() {
                return this.IsNull(this.tabledevice.descColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescNull() {
                this[this.tabledevice.descColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isparam1Null() {
                return this.IsNull(this.tabledevice.param1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setparam1Null() {
                this[this.tabledevice.param1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isparam2Null() {
                return this.IsNull(this.tabledevice.param2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setparam2Null() {
                this[this.tabledevice.param2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isparam3Null() {
                return this.IsNull(this.tabledevice.param3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setparam3Null() {
                this[this.tabledevice.param3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdriver_IdNull() {
                return this.IsNull(this.tabledevice.driver_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdriver_IdNull() {
                this[this.tabledevice.driver_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public datablockRow[] GetdatablockRows() {
                if ((this.Table.ChildRelations["device_datablock"] == null)) {
                    return new datablockRow[0];
                }
                else {
                    return ((datablockRow[])(base.GetChildRows(this.Table.ChildRelations["device_datablock"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class datablockRow : global::System.Data.DataRow {
            
            private datablockDataTable tabledatablock;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal datablockRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledatablock = ((datablockDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tabledatablock.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'datablock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledatablock.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    try {
                        return ((string)(this[this.tabledatablock.typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'type\' in table \'datablock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledatablock.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string address {
                get {
                    try {
                        return ((string)(this[this.tabledatablock.addressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'address\' in table \'datablock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledatablock.addressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string elemcount {
                get {
                    try {
                        return ((string)(this[this.tabledatablock.elemcountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'elemcount\' in table \'datablock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledatablock.elemcountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string elembytes {
                get {
                    try {
                        return ((string)(this[this.tabledatablock.elembytesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'elembytes\' in table \'datablock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledatablock.elembytesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cyclerate {
                get {
                    try {
                        return ((string)(this[this.tabledatablock.cyclerateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cyclerate\' in table \'datablock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledatablock.cyclerateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string phase {
                get {
                    try {
                        return ((string)(this[this.tabledatablock.phaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'phase\' in table \'datablock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledatablock.phaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string task {
                get {
                    try {
                        return ((string)(this[this.tabledatablock.taskColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'task\' in table \'datablock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledatablock.taskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string desc {
                get {
                    try {
                        return ((string)(this[this.tabledatablock.descColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'desc\' in table \'datablock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledatablock.descColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string param1 {
                get {
                    try {
                        return ((string)(this[this.tabledatablock.param1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'param1\' in table \'datablock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledatablock.param1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string param2 {
                get {
                    try {
                        return ((string)(this[this.tabledatablock.param2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'param2\' in table \'datablock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledatablock.param2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string param3 {
                get {
                    try {
                        return ((string)(this[this.tabledatablock.param3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'param3\' in table \'datablock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledatablock.param3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int device_Id {
                get {
                    try {
                        return ((int)(this[this.tabledatablock.device_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'device_Id\' in table \'datablock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledatablock.device_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deviceRow deviceRow {
                get {
                    return ((deviceRow)(this.GetParentRow(this.Table.ParentRelations["device_datablock"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["device_datablock"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tabledatablock.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tabledatablock.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tabledatablock.typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tabledatablock.typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaddressNull() {
                return this.IsNull(this.tabledatablock.addressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaddressNull() {
                this[this.tabledatablock.addressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IselemcountNull() {
                return this.IsNull(this.tabledatablock.elemcountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetelemcountNull() {
                this[this.tabledatablock.elemcountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IselembytesNull() {
                return this.IsNull(this.tabledatablock.elembytesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetelembytesNull() {
                this[this.tabledatablock.elembytesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscyclerateNull() {
                return this.IsNull(this.tabledatablock.cyclerateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcyclerateNull() {
                this[this.tabledatablock.cyclerateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsphaseNull() {
                return this.IsNull(this.tabledatablock.phaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetphaseNull() {
                this[this.tabledatablock.phaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstaskNull() {
                return this.IsNull(this.tabledatablock.taskColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettaskNull() {
                this[this.tabledatablock.taskColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescNull() {
                return this.IsNull(this.tabledatablock.descColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescNull() {
                this[this.tabledatablock.descColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isparam1Null() {
                return this.IsNull(this.tabledatablock.param1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setparam1Null() {
                this[this.tabledatablock.param1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isparam2Null() {
                return this.IsNull(this.tabledatablock.param2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setparam2Null() {
                this[this.tabledatablock.param2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isparam3Null() {
                return this.IsNull(this.tabledatablock.param3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setparam3Null() {
                this[this.tabledatablock.param3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdevice_IdNull() {
                return this.IsNull(this.tabledatablock.device_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdevice_IdNull() {
                this[this.tabledatablock.device_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class driverRowChangeEvent : global::System.EventArgs {
            
            private driverRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public driverRowChangeEvent(driverRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public driverRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class deviceRowChangeEvent : global::System.EventArgs {
            
            private deviceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deviceRowChangeEvent(deviceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deviceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class datablockRowChangeEvent : global::System.EventArgs {
            
            private datablockRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public datablockRowChangeEvent(datablockRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public datablockRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591